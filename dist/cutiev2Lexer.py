# Generated from cutiev2.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,24,383,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,11,1,11,3,11,132,8,11,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,14,1,14,1,14,3,14,154,8,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,
        1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,
        1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,3,24,190,8,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,
        1,27,1,27,3,27,203,8,27,1,28,1,28,1,28,1,28,3,28,209,8,28,1,29,1,
        29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,
        36,303,8,36,1,37,4,37,306,8,37,11,37,12,37,307,1,37,1,37,1,38,3,
        38,313,8,38,1,38,1,38,4,38,317,8,38,11,38,12,38,318,1,38,3,38,322,
        8,38,1,38,3,38,325,8,38,1,39,3,39,328,8,39,1,39,1,39,4,39,332,8,
        39,11,39,12,39,333,1,39,1,39,5,39,338,8,39,10,39,12,39,341,9,39,
        1,39,3,39,344,8,39,1,39,1,39,1,39,5,39,349,8,39,10,39,12,39,352,
        9,39,3,39,354,8,39,1,40,1,40,3,40,358,8,40,1,41,1,41,1,41,1,41,1,
        41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,375,8,
        41,1,42,1,42,5,42,379,8,42,10,42,12,42,382,9,42,0,0,43,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,0,21,0,23,0,25,0,27,0,29,0,31,0,
        33,0,35,0,37,0,39,0,41,0,43,0,45,0,47,0,49,0,51,0,53,0,55,0,57,10,
        59,11,61,12,63,13,65,14,67,15,69,16,71,17,73,18,75,19,77,20,79,21,
        81,22,83,23,85,24,1,0,5,3,0,9,10,13,13,32,32,1,0,49,57,1,0,48,57,
        2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,395,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
        1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,1,87,1,0,0,0,3,89,1,0,0,0,5,91,
        1,0,0,0,7,93,1,0,0,0,9,95,1,0,0,0,11,97,1,0,0,0,13,99,1,0,0,0,15,
        101,1,0,0,0,17,103,1,0,0,0,19,108,1,0,0,0,21,122,1,0,0,0,23,131,
        1,0,0,0,25,133,1,0,0,0,27,142,1,0,0,0,29,153,1,0,0,0,31,155,1,0,
        0,0,33,157,1,0,0,0,35,159,1,0,0,0,37,161,1,0,0,0,39,163,1,0,0,0,
        41,165,1,0,0,0,43,168,1,0,0,0,45,172,1,0,0,0,47,176,1,0,0,0,49,189,
        1,0,0,0,51,191,1,0,0,0,53,196,1,0,0,0,55,202,1,0,0,0,57,208,1,0,
        0,0,59,210,1,0,0,0,61,214,1,0,0,0,63,217,1,0,0,0,65,220,1,0,0,0,
        67,232,1,0,0,0,69,243,1,0,0,0,71,254,1,0,0,0,73,302,1,0,0,0,75,305,
        1,0,0,0,77,324,1,0,0,0,79,353,1,0,0,0,81,357,1,0,0,0,83,374,1,0,
        0,0,85,376,1,0,0,0,87,88,5,40,0,0,88,2,1,0,0,0,89,90,5,41,0,0,90,
        4,1,0,0,0,91,92,5,123,0,0,92,6,1,0,0,0,93,94,5,125,0,0,94,8,1,0,
        0,0,95,96,5,91,0,0,96,10,1,0,0,0,97,98,5,93,0,0,98,12,1,0,0,0,99,
        100,5,46,0,0,100,14,1,0,0,0,101,102,5,44,0,0,102,16,1,0,0,0,103,
        104,5,124,0,0,104,105,5,60,0,0,105,106,5,51,0,0,106,107,5,124,0,
        0,107,18,1,0,0,0,108,109,5,107,0,0,109,110,5,114,0,0,110,111,5,111,
        0,0,111,112,5,112,0,0,112,113,5,107,0,0,113,114,5,97,0,0,114,115,
        5,119,0,0,115,116,5,107,0,0,116,117,5,114,0,0,117,118,5,111,0,0,
        118,119,5,112,0,0,119,120,5,107,0,0,120,121,5,101,0,0,121,20,1,0,
        0,0,122,123,5,105,0,0,123,124,5,110,0,0,124,125,5,110,0,0,125,126,
        5,121,0,0,126,127,5,111,0,0,127,128,5,100,0,0,128,22,1,0,0,0,129,
        132,3,19,9,0,130,132,3,21,10,0,131,129,1,0,0,0,131,130,1,0,0,0,132,
        24,1,0,0,0,133,134,5,109,0,0,134,135,5,110,0,0,135,136,5,105,0,0,
        136,137,5,101,0,0,137,138,5,106,0,0,138,139,5,115,0,0,139,140,5,
        122,0,0,140,141,5,121,0,0,141,26,1,0,0,0,142,143,5,119,0,0,143,144,
        5,105,0,0,144,145,5,101,0,0,145,146,5,107,0,0,146,147,5,115,0,0,
        147,148,5,122,0,0,148,149,5,121,0,0,149,28,1,0,0,0,150,154,3,25,
        12,0,151,154,3,27,13,0,152,154,3,23,11,0,153,150,1,0,0,0,153,151,
        1,0,0,0,153,152,1,0,0,0,154,30,1,0,0,0,155,156,5,43,0,0,156,32,1,
        0,0,0,157,158,5,45,0,0,158,34,1,0,0,0,159,160,5,42,0,0,160,36,1,
        0,0,0,161,162,5,47,0,0,162,38,1,0,0,0,163,164,5,37,0,0,164,40,1,
        0,0,0,165,166,5,47,0,0,166,167,5,47,0,0,167,42,1,0,0,0,168,169,5,
        124,0,0,169,170,5,94,0,0,170,171,5,124,0,0,171,44,1,0,0,0,172,173,
        5,124,0,0,173,174,5,118,0,0,174,175,5,124,0,0,175,46,1,0,0,0,176,
        177,5,124,0,0,177,178,5,42,0,0,178,179,5,124,0,0,179,48,1,0,0,0,
        180,190,3,31,15,0,181,190,3,33,16,0,182,190,3,35,17,0,183,190,3,
        37,18,0,184,190,3,39,19,0,185,190,3,41,20,0,186,190,3,43,21,0,187,
        190,3,45,22,0,188,190,3,47,23,0,189,180,1,0,0,0,189,181,1,0,0,0,
        189,182,1,0,0,0,189,183,1,0,0,0,189,184,1,0,0,0,189,185,1,0,0,0,
        189,186,1,0,0,0,189,187,1,0,0,0,189,188,1,0,0,0,190,50,1,0,0,0,191,
        192,5,111,0,0,192,193,5,114,0,0,193,194,5,97,0,0,194,195,5,122,0,
        0,195,52,1,0,0,0,196,197,5,108,0,0,197,198,5,117,0,0,198,199,5,98,
        0,0,199,54,1,0,0,0,200,203,3,51,25,0,201,203,3,53,26,0,202,200,1,
        0,0,0,202,201,1,0,0,0,203,56,1,0,0,0,204,209,3,55,27,0,205,209,3,
        29,14,0,206,209,3,23,11,0,207,209,3,49,24,0,208,204,1,0,0,0,208,
        205,1,0,0,0,208,206,1,0,0,0,208,207,1,0,0,0,209,58,1,0,0,0,210,211,
        5,110,0,0,211,212,5,105,0,0,212,213,5,101,0,0,213,60,1,0,0,0,214,
        215,5,45,0,0,215,216,5,62,0,0,216,62,1,0,0,0,217,218,5,60,0,0,218,
        219,5,45,0,0,219,64,1,0,0,0,220,221,5,100,0,0,221,222,5,114,0,0,
        222,223,5,117,0,0,223,224,5,107,0,0,224,225,5,97,0,0,225,226,5,114,
        0,0,226,227,5,101,0,0,227,228,5,99,0,0,228,229,5,122,0,0,229,230,
        5,107,0,0,230,231,5,97,0,0,231,66,1,0,0,0,232,233,5,119,0,0,233,
        234,5,97,0,0,234,235,5,114,0,0,235,236,5,117,0,0,236,237,5,110,0,
        0,237,238,5,101,0,0,238,239,5,99,0,0,239,240,5,122,0,0,240,241,5,
        101,0,0,241,242,5,107,0,0,242,68,1,0,0,0,243,244,5,112,0,0,244,245,
        5,111,0,0,245,246,5,119,0,0,246,247,5,105,0,0,247,248,5,101,0,0,
        248,249,5,108,0,0,249,250,5,97,0,0,250,251,5,110,0,0,251,252,5,107,
        0,0,252,253,5,111,0,0,253,70,1,0,0,0,254,255,5,122,0,0,255,256,5,
        119,0,0,256,257,5,114,0,0,257,258,5,111,0,0,258,259,5,99,0,0,259,
        260,5,105,0,0,260,261,5,107,0,0,261,72,1,0,0,0,262,263,5,98,0,0,
        263,264,5,101,0,0,264,265,5,122,0,0,265,266,5,112,0,0,266,267,5,
        114,0,0,267,268,5,122,0,0,268,269,5,101,0,0,269,270,5,99,0,0,270,
        271,5,105,0,0,271,272,5,110,0,0,272,273,5,101,0,0,273,303,5,107,
        0,0,274,275,5,122,0,0,275,276,5,101,0,0,276,277,5,114,0,0,277,278,
        5,111,0,0,278,279,5,106,0,0,279,280,5,101,0,0,280,281,5,100,0,0,
        281,282,5,121,0,0,282,283,5,110,0,0,283,284,5,101,0,0,284,303,5,
        107,0,0,285,286,5,110,0,0,286,287,5,97,0,0,287,288,5,112,0,0,288,
        289,5,105,0,0,289,290,5,115,0,0,290,291,5,105,0,0,291,303,5,107,
        0,0,292,293,5,122,0,0,293,294,5,112,0,0,294,295,5,114,0,0,295,296,
        5,122,0,0,296,297,5,101,0,0,297,298,5,99,0,0,298,299,5,105,0,0,299,
        300,5,110,0,0,300,301,5,101,0,0,301,303,5,107,0,0,302,262,1,0,0,
        0,302,274,1,0,0,0,302,285,1,0,0,0,302,292,1,0,0,0,303,74,1,0,0,0,
        304,306,7,0,0,0,305,304,1,0,0,0,306,307,1,0,0,0,307,305,1,0,0,0,
        307,308,1,0,0,0,308,309,1,0,0,0,309,310,6,37,0,0,310,76,1,0,0,0,
        311,313,3,33,16,0,312,311,1,0,0,0,312,313,1,0,0,0,313,314,1,0,0,
        0,314,316,7,1,0,0,315,317,7,2,0,0,316,315,1,0,0,0,317,318,1,0,0,
        0,318,316,1,0,0,0,318,319,1,0,0,0,319,325,1,0,0,0,320,322,3,33,16,
        0,321,320,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,325,7,2,0,
        0,324,312,1,0,0,0,324,321,1,0,0,0,325,78,1,0,0,0,326,328,3,33,16,
        0,327,326,1,0,0,0,327,328,1,0,0,0,328,329,1,0,0,0,329,331,7,1,0,
        0,330,332,7,2,0,0,331,330,1,0,0,0,332,333,1,0,0,0,333,331,1,0,0,
        0,333,334,1,0,0,0,334,335,1,0,0,0,335,339,3,13,6,0,336,338,7,2,0,
        0,337,336,1,0,0,0,338,341,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,
        0,340,354,1,0,0,0,341,339,1,0,0,0,342,344,3,33,16,0,343,342,1,0,
        0,0,343,344,1,0,0,0,344,345,1,0,0,0,345,346,7,2,0,0,346,350,3,13,
        6,0,347,349,7,2,0,0,348,347,1,0,0,0,349,352,1,0,0,0,350,348,1,0,
        0,0,350,351,1,0,0,0,351,354,1,0,0,0,352,350,1,0,0,0,353,327,1,0,
        0,0,353,343,1,0,0,0,354,80,1,0,0,0,355,358,3,77,38,0,356,358,3,79,
        39,0,357,355,1,0,0,0,357,356,1,0,0,0,358,82,1,0,0,0,359,360,5,110,
        0,0,360,361,5,105,0,0,361,362,5,101,0,0,362,363,5,112,0,0,363,364,
        5,114,0,0,364,365,5,97,0,0,365,366,5,119,0,0,366,367,5,100,0,0,367,
        375,5,97,0,0,368,369,5,112,0,0,369,370,5,114,0,0,370,371,5,97,0,
        0,371,372,5,119,0,0,372,373,5,100,0,0,373,375,5,97,0,0,374,359,1,
        0,0,0,374,368,1,0,0,0,375,84,1,0,0,0,376,380,7,3,0,0,377,379,7,4,
        0,0,378,377,1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,380,381,1,0,
        0,0,381,86,1,0,0,0,382,380,1,0,0,0,21,0,131,153,189,202,208,302,
        307,312,318,321,324,327,333,339,343,350,353,357,374,380,1,6,0,0
    ]

class cutiev2Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Open_Parenthesis = 1
    Close_Parenthesis = 2
    Open_Bracket = 3
    Close_Bracket = 4
    Open_Square_Bracket = 5
    Close_Square_Bracket = 6
    Dot = 7
    Comma = 8
    Semicolon = 9
    Operator_sign = 10
    Not = 11
    Var_define = 12
    Val_assign = 13
    Print = 14
    If = 15
    While = 16
    Return = 17
    TYPE = 18
    White_Sign = 19
    Int = 20
    Double = 21
    Number = 22
    Bool = 23
    NAME = 24

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "'['", "']'", "'.'", "','", "'|<3|'", 
            "'nie'", "'->'", "'<-'", "'drukareczka'", "'waruneczek'", "'powielanko'", 
            "'zwrocik'" ]

    symbolicNames = [ "<INVALID>",
            "Open_Parenthesis", "Close_Parenthesis", "Open_Bracket", "Close_Bracket", 
            "Open_Square_Bracket", "Close_Square_Bracket", "Dot", "Comma", 
            "Semicolon", "Operator_sign", "Not", "Var_define", "Val_assign", 
            "Print", "If", "While", "Return", "TYPE", "White_Sign", "Int", 
            "Double", "Number", "Bool", "NAME" ]

    ruleNames = [ "Open_Parenthesis", "Close_Parenthesis", "Open_Bracket", 
                  "Close_Bracket", "Open_Square_Bracket", "Close_Square_Bracket", 
                  "Dot", "Comma", "Semicolon", "Equals", "UnEquals", "Operator_sign_equality", 
                  "Lesser", "Greater", "Operator_sign_comparison", "Plus", 
                  "Minus", "Multiplication", "Division", "Modulo", "FloorDivision", 
                  "Max", "Min", "Power", "Operator_sign_numerical", "And", 
                  "Or", "Operator_sign_boolean", "Operator_sign", "Not", 
                  "Var_define", "Val_assign", "Print", "If", "While", "Return", 
                  "TYPE", "White_Sign", "Int", "Double", "Number", "Bool", 
                  "NAME" ]

    grammarFileName = "cutiev2.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


