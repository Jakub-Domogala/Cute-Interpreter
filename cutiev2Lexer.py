# Generated from cutiev2.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,24,315,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,0,
        1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,
        1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,13,1,13,3,13,128,8,13,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,
        16,1,16,3,16,150,8,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,
        21,1,21,1,21,1,21,3,21,164,8,21,1,22,1,22,1,22,1,22,1,22,1,23,1,
        23,1,23,1,23,1,24,1,24,3,24,177,8,24,1,25,1,25,1,25,1,25,3,25,183,
        8,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,3,31,267,8,31,1,32,4,32,270,8,32,11,32,
        12,32,271,1,32,1,32,1,33,3,33,277,8,33,1,33,1,33,5,33,281,8,33,10,
        33,12,33,284,9,33,1,34,1,34,1,35,1,35,3,35,290,8,35,1,36,1,36,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,
        36,307,8,36,1,37,1,37,5,37,311,8,37,10,37,12,37,314,9,37,0,0,38,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,0,25,0,27,
        0,29,0,31,0,33,0,35,0,37,0,39,0,41,0,43,0,45,0,47,0,49,0,51,12,53,
        13,55,14,57,15,59,16,61,17,63,18,65,19,67,20,69,21,71,22,73,23,75,
        24,1,0,4,3,0,9,10,13,13,32,32,1,0,48,57,3,0,65,90,95,95,97,122,4,
        0,48,57,65,90,95,95,97,122,319,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
        0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,
        0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,
        0,75,1,0,0,0,1,77,1,0,0,0,3,80,1,0,0,0,5,83,1,0,0,0,7,85,1,0,0,0,
        9,87,1,0,0,0,11,89,1,0,0,0,13,91,1,0,0,0,15,93,1,0,0,0,17,95,1,0,
        0,0,19,97,1,0,0,0,21,99,1,0,0,0,23,104,1,0,0,0,25,118,1,0,0,0,27,
        127,1,0,0,0,29,129,1,0,0,0,31,138,1,0,0,0,33,149,1,0,0,0,35,151,
        1,0,0,0,37,153,1,0,0,0,39,155,1,0,0,0,41,157,1,0,0,0,43,163,1,0,
        0,0,45,165,1,0,0,0,47,170,1,0,0,0,49,176,1,0,0,0,51,182,1,0,0,0,
        53,184,1,0,0,0,55,188,1,0,0,0,57,199,1,0,0,0,59,210,1,0,0,0,61,218,
        1,0,0,0,63,266,1,0,0,0,65,269,1,0,0,0,67,276,1,0,0,0,69,285,1,0,
        0,0,71,289,1,0,0,0,73,306,1,0,0,0,75,308,1,0,0,0,77,78,5,45,0,0,
        78,79,5,62,0,0,79,2,1,0,0,0,80,81,5,60,0,0,81,82,5,45,0,0,82,4,1,
        0,0,0,83,84,5,40,0,0,84,6,1,0,0,0,85,86,5,41,0,0,86,8,1,0,0,0,87,
        88,5,123,0,0,88,10,1,0,0,0,89,90,5,125,0,0,90,12,1,0,0,0,91,92,5,
        91,0,0,92,14,1,0,0,0,93,94,5,93,0,0,94,16,1,0,0,0,95,96,5,46,0,0,
        96,18,1,0,0,0,97,98,5,44,0,0,98,20,1,0,0,0,99,100,5,124,0,0,100,
        101,5,60,0,0,101,102,5,51,0,0,102,103,5,124,0,0,103,22,1,0,0,0,104,
        105,5,107,0,0,105,106,5,114,0,0,106,107,5,111,0,0,107,108,5,112,
        0,0,108,109,5,107,0,0,109,110,5,97,0,0,110,111,5,119,0,0,111,112,
        5,107,0,0,112,113,5,114,0,0,113,114,5,111,0,0,114,115,5,112,0,0,
        115,116,5,107,0,0,116,117,5,101,0,0,117,24,1,0,0,0,118,119,5,105,
        0,0,119,120,5,110,0,0,120,121,5,110,0,0,121,122,5,121,0,0,122,123,
        5,111,0,0,123,124,5,100,0,0,124,26,1,0,0,0,125,128,3,23,11,0,126,
        128,3,25,12,0,127,125,1,0,0,0,127,126,1,0,0,0,128,28,1,0,0,0,129,
        130,5,109,0,0,130,131,5,110,0,0,131,132,5,105,0,0,132,133,5,101,
        0,0,133,134,5,106,0,0,134,135,5,115,0,0,135,136,5,122,0,0,136,137,
        5,121,0,0,137,30,1,0,0,0,138,139,5,119,0,0,139,140,5,105,0,0,140,
        141,5,101,0,0,141,142,5,107,0,0,142,143,5,115,0,0,143,144,5,122,
        0,0,144,145,5,121,0,0,145,32,1,0,0,0,146,150,3,29,14,0,147,150,3,
        31,15,0,148,150,3,27,13,0,149,146,1,0,0,0,149,147,1,0,0,0,149,148,
        1,0,0,0,150,34,1,0,0,0,151,152,5,43,0,0,152,36,1,0,0,0,153,154,5,
        45,0,0,154,38,1,0,0,0,155,156,5,42,0,0,156,40,1,0,0,0,157,158,5,
        47,0,0,158,42,1,0,0,0,159,164,3,35,17,0,160,164,3,37,18,0,161,164,
        3,39,19,0,162,164,3,41,20,0,163,159,1,0,0,0,163,160,1,0,0,0,163,
        161,1,0,0,0,163,162,1,0,0,0,164,44,1,0,0,0,165,166,5,111,0,0,166,
        167,5,114,0,0,167,168,5,97,0,0,168,169,5,122,0,0,169,46,1,0,0,0,
        170,171,5,108,0,0,171,172,5,117,0,0,172,173,5,98,0,0,173,48,1,0,
        0,0,174,177,3,45,22,0,175,177,3,47,23,0,176,174,1,0,0,0,176,175,
        1,0,0,0,177,50,1,0,0,0,178,183,3,49,24,0,179,183,3,33,16,0,180,183,
        3,27,13,0,181,183,3,43,21,0,182,178,1,0,0,0,182,179,1,0,0,0,182,
        180,1,0,0,0,182,181,1,0,0,0,183,52,1,0,0,0,184,185,5,110,0,0,185,
        186,5,105,0,0,186,187,5,101,0,0,187,54,1,0,0,0,188,189,5,119,0,0,
        189,190,5,97,0,0,190,191,5,114,0,0,191,192,5,117,0,0,192,193,5,110,
        0,0,193,194,5,101,0,0,194,195,5,99,0,0,195,196,5,122,0,0,196,197,
        5,101,0,0,197,198,5,107,0,0,198,56,1,0,0,0,199,200,5,112,0,0,200,
        201,5,111,0,0,201,202,5,119,0,0,202,203,5,105,0,0,203,204,5,101,
        0,0,204,205,5,108,0,0,205,206,5,97,0,0,206,207,5,110,0,0,207,208,
        5,107,0,0,208,209,5,111,0,0,209,58,1,0,0,0,210,211,5,122,0,0,211,
        212,5,119,0,0,212,213,5,114,0,0,213,214,5,111,0,0,214,215,5,99,0,
        0,215,216,5,105,0,0,216,217,5,107,0,0,217,60,1,0,0,0,218,219,5,109,
        0,0,219,220,5,101,0,0,220,221,5,116,0,0,221,222,5,111,0,0,222,223,
        5,100,0,0,223,224,5,107,0,0,224,225,5,97,0,0,225,62,1,0,0,0,226,
        227,5,98,0,0,227,228,5,101,0,0,228,229,5,122,0,0,229,230,5,112,0,
        0,230,231,5,114,0,0,231,232,5,122,0,0,232,233,5,101,0,0,233,234,
        5,99,0,0,234,235,5,105,0,0,235,236,5,110,0,0,236,237,5,101,0,0,237,
        267,5,107,0,0,238,239,5,122,0,0,239,240,5,101,0,0,240,241,5,114,
        0,0,241,242,5,111,0,0,242,243,5,106,0,0,243,244,5,101,0,0,244,245,
        5,100,0,0,245,246,5,121,0,0,246,247,5,110,0,0,247,248,5,101,0,0,
        248,267,5,107,0,0,249,250,5,110,0,0,250,251,5,97,0,0,251,252,5,112,
        0,0,252,253,5,105,0,0,253,254,5,115,0,0,254,255,5,105,0,0,255,267,
        5,107,0,0,256,257,5,122,0,0,257,258,5,112,0,0,258,259,5,114,0,0,
        259,260,5,122,0,0,260,261,5,101,0,0,261,262,5,99,0,0,262,263,5,105,
        0,0,263,264,5,110,0,0,264,265,5,101,0,0,265,267,5,107,0,0,266,226,
        1,0,0,0,266,238,1,0,0,0,266,249,1,0,0,0,266,256,1,0,0,0,267,64,1,
        0,0,0,268,270,7,0,0,0,269,268,1,0,0,0,270,271,1,0,0,0,271,269,1,
        0,0,0,271,272,1,0,0,0,272,273,1,0,0,0,273,274,6,32,0,0,274,66,1,
        0,0,0,275,277,5,45,0,0,276,275,1,0,0,0,276,277,1,0,0,0,277,278,1,
        0,0,0,278,282,7,1,0,0,279,281,7,1,0,0,280,279,1,0,0,0,281,284,1,
        0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,68,1,0,0,0,284,282,1,0,
        0,0,285,286,5,48,0,0,286,70,1,0,0,0,287,290,3,67,33,0,288,290,3,
        69,34,0,289,287,1,0,0,0,289,288,1,0,0,0,290,72,1,0,0,0,291,292,5,
        110,0,0,292,293,5,105,0,0,293,294,5,101,0,0,294,295,5,112,0,0,295,
        296,5,114,0,0,296,297,5,97,0,0,297,298,5,119,0,0,298,299,5,100,0,
        0,299,307,5,97,0,0,300,301,5,112,0,0,301,302,5,114,0,0,302,303,5,
        97,0,0,303,304,5,119,0,0,304,305,5,100,0,0,305,307,5,97,0,0,306,
        291,1,0,0,0,306,300,1,0,0,0,307,74,1,0,0,0,308,312,7,2,0,0,309,311,
        7,3,0,0,310,309,1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,312,313,
        1,0,0,0,313,76,1,0,0,0,314,312,1,0,0,0,13,0,127,149,163,176,182,
        266,271,276,282,289,306,312,1,6,0,0
    ]

class cutiev2Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    Open_Parenthesis = 3
    Close_Parenthesis = 4
    Open_Bracket = 5
    Close_Bracket = 6
    Open_Square_Bracket = 7
    Close_Square_Bracket = 8
    Dot = 9
    Comma = 10
    Semicolon = 11
    Operator_sign = 12
    Not = 13
    If = 14
    While = 15
    Return = 16
    Def = 17
    Type = 18
    White_Sign = 19
    Int = 20
    Double = 21
    Number = 22
    Bool = 23
    NAME = 24

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'->'", "'<-'", "'('", "')'", "'{'", "'}'", "'['", "']'", "'.'", 
            "','", "'|<3|'", "'nie'", "'waruneczek'", "'powielanko'", "'zwrocik'", 
            "'metodka'", "'0'" ]

    symbolicNames = [ "<INVALID>",
            "Open_Parenthesis", "Close_Parenthesis", "Open_Bracket", "Close_Bracket", 
            "Open_Square_Bracket", "Close_Square_Bracket", "Dot", "Comma", 
            "Semicolon", "Operator_sign", "Not", "If", "While", "Return", 
            "Def", "Type", "White_Sign", "Int", "Double", "Number", "Bool", 
            "NAME" ]

    ruleNames = [ "T__0", "T__1", "Open_Parenthesis", "Close_Parenthesis", 
                  "Open_Bracket", "Close_Bracket", "Open_Square_Bracket", 
                  "Close_Square_Bracket", "Dot", "Comma", "Semicolon", "Equals", 
                  "UnEquals", "Operator_sign_equality", "Lesser", "Greater", 
                  "Operator_sign_comparison", "Plus", "Minus", "Multiplication", 
                  "Division", "Operator_sign_numerical", "And", "Or", "Operator_sign_boolean", 
                  "Operator_sign", "Not", "If", "While", "Return", "Def", 
                  "Type", "White_Sign", "Int", "Double", "Number", "Bool", 
                  "NAME" ]

    grammarFileName = "cutiev2.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


